// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a = instruction, b = aluo, sel = instruction[15], out = dff);
    Not(in = instruction[15], out = aprog);
    And(a = instruction[15], b = instruction[5], out = d1);
    Or(a = aprog, b = d1, out = loada);
    Register(in = dff, load = loada, out = a, out[0..14] = addressM, out[15] = tmp);
    Mux16(a = a, b = inM, sel = instruction[12], out = aandm);
    ALU(x = d, y = aandm, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = aluo, out = outM, zr = aluzr, ng = alung);

    And(a = instruction[15], b = instruction[4], out = dload);
    Register(in = aluo, load = dload, out = d);

    Not(in = alung, out = tmpnalung);
    Not(in = aluzr, out = naluzr);
    And(a = tmpnalung, b = naluzr, out = nalung);

    And(a = nalung, b = instruction[0], out = plusjmp);
    And(a = aluzr, b = instruction[1], out = zerojmp);
    And(a = alung, b = instruction[2], out = minujmp);
    Or(a = minujmp, b = zerojmp, out = j1);
    Or(a = j1, b = plusjmp, out = jump);

    And(a = instruction[15], b = instruction[3], out = writeM);
    And(a = instruction[15], b = jump, out = pcload);

    PC(in = a, inc = true, load = pcload, reset = reset, out[0..14] = pc, out[15] = pctmp);
}
